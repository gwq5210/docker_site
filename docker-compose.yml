version: "3.1"
secrets:                        # top level secrets block
  gwq5210.com.key:
    file: certs/gwq5210.com/gwq5210.com.key
  gwq5210.com.crt:
    file: certs/gwq5210.com/gwq5210.com.crt
  ca.crt:
    file: certs/ca/ca.crt
  mysql_root_password.txt:
    file: mysql/conf/mysql_root_password.txt
  v2ray_uuid.txt:
    file: v2ray/conf/v2ray_uuid.txt
  scrapyd_username.txt:
    file: scrapyd/conf/scrapyd_username.txt
  scrapyd_password.txt:
    file: scrapyd/conf/scrapyd_password.txt
  elasticsearch_bootstrap_password.txt:
    file: elasticsearch/conf/elasticsearch_bootstrap_password.txt
  elasticsearch_keystore_password.txt:
    file: elasticsearch/conf/elasticsearch_keystore_password.txt
  mirai_bot_qq.txt:
    file: mirai/conf/mirai_bot_qq.txt
  mirai_bot_qq_password.txt:
    file: mirai/conf/mirai_bot_qq_password.txt
  mirai_verify_key.txt:
    file: mirai/conf/mirai_verify_key.txt

services:
  gwq5210.nginx:
    # image: gwq5210/nginx
    build:
      context: .
      dockerfile: ./nginx/Dockerfile
    container_name: gwq5210.nginx
    restart: always
    secrets:
     - gwq5210.com.key
     - gwq5210.com.crt
    volumes:
      - ./nginx/conf:/etc/nginx/conf.d
      - ./nginx/html:/var/www/gwq5210.com/html
      - ${DOCKER_SITE_LOGS_DIR}/nginx:/var/log/nginx
    # network_mode: "host"
    ports:  # host模式这个配置失效
      - "80:80"
      - "443:443"
      - "6800:6800"  # scrapyd
      - "6010:6010"  # tank
      - "8888:8888"  # phpmyadmin
      - "9090:9090"  # filebrowser
    links:
      - gwq5210.scrapyd
      - gwq5210.mirai
      - gwq5210.elasticsearch
      - gwq5210.filebrowser
      - gwq5210.v2ray
      - gwq5210.tank
      - gwq5210.phpmyadmin
    ulimits:
      nproc: 65535
      nofile:
        soft: 65535
        hard: 65535
    environment:
      TZ: Asia/Shanghai
    deploy:
      resources:
        limits:
          cpus: '0.2'
          memory: 128M
        reservations:
          cpus: '0.2'
          memory: 128M

  gwq5210.mysql:
    # image: gwq5210/mysql
    build:
      context: .
      dockerfile: ./mysql/Dockerfile
    restart: always
    container_name: gwq5210.mysql  # 容器名
    secrets:
     - mysql_root_password.txt
    volumes:
      - ./mysql/conf/my.cnf:/etc/mysql/conf.d/my.cnf
      - ${DOCKER_SITE_LOGS_DIR}/mysql:/var/log/mysql
      - ${DOCKER_SITE_KEY_DATA_DIR}/mysql:/var/lib/mysql  # 挂载目录，持久化存储
    ports:
      - "3306:3306"
      - "33060:33060"
      - "33061:33061"
    environment:
      TZ: Asia/Shanghai
      MYSQL_ROOT_PASSWORD_FILE: /run/secrets/mysql_root_password.txt  # 使用docker secret设置root用户的密码
      MYSQL_DATABASE: "tank"
    deploy:
      resources:
        limits:
          cpus: '0.2'
          memory: 512M
        reservations:
          cpus: '0.2'
          memory: 512M

  gwq5210.tank:
    # image: gwq5210/tank
    build:
      context: .
      dockerfile: ./tank/Dockerfile
    restart: always
    container_name: gwq5210.tank
    volumes:
      - ${TANK_SHARE_DATA_DIR}:/data/build/matter
      - ${DOCKER_SITE_CONF_DIR}/tank/:/data/build/conf
      - ${DOCKER_SITE_LOGS_DIR}/tank:/data/build/log
    # ports:
    #   - "127.0.0.1:6011:6010"
    links:
      - gwq5210.mysql
    environment:
      TZ: Asia/Shanghai
    deploy:
      resources:
        limits:
          cpus: '0.2'
          memory: 128M
        reservations:
          cpus: '0.2'
          memory: 128M

  gwq5210.php:
    # image: gwq5210/php
    build:
      context: .
      dockerfile: ./php/Dockerfile
    container_name: gwq5210.php
    restart: always
    # ports:
    #   - "127.0.0.1:9000:9000"
    volumes:
      - ./nginx/html:/var/www/gwq5210.com/html
    environment:
      TZ: Asia/Shanghai
    deploy:
      resources:
        limits:
          cpus: '0.1'
          memory: 128M
        reservations:
          cpus: '0.1'
          memory: 128M

  gwq5210.phpmyadmin:
    image: phpmyadmin/phpmyadmin
    container_name: gwq5210.phpmyadmin
    # ports:
    #   - "127.0.0.1:8889:80"
    environment:
      TZ: Asia/Shanghai
      PMA_HOST: gwq5210.com
      PMA_PORT: 3306
      PMA_ARBITRARY: 1
    restart: always
    links:
      - gwq5210.mysql
    deploy:
      resources:
        limits:
          cpus: '0.1'
          memory: 128M
        reservations:
          cpus: '0.1'
          memory: 128M

  gwq5210.v2ray:
    # image: gwq5210/v2ray
    build:
      context: .
      dockerfile: ./v2ray/Dockerfile
    restart: always
    container_name: gwq5210.v2ray  # 容器名
    secrets:
     - v2ray_uuid.txt
    volumes:
      - ./v2ray/conf/config.json:/etc/v2ray/config.json
      - ${DOCKER_SITE_LOGS_DIR}/v2ray:/var/log/v2ray
    # ports:
    #   - "127.0.0.1:10000:10000"
    environment:
      TZ: Asia/Shanghai
      V2RAY_UUID_FILE: /run/secrets/v2ray_uuid.txt
    deploy:
      resources:
        limits:
          cpus: '0.1'
          memory: 128M
        reservations:
          cpus: '0.1'
          memory: 128M

  gwq5210.filebrowser:
    # image: gwq5210/filebrowser
    build:
      context: .
      dockerfile: ./filebrowser/Dockerfile
    restart: always
    container_name: gwq5210.filebrowser  # 容器名
    volumes:
      - ${FILE_BROWSER_SHARE_DATA_DIR}:/srv
      - ${DOCKER_SITE_CONF_DIR}/filebrowser:/etc/filebrowser
      - ./filebrowser/conf/filebrowser.json:/.filebrowser.json
    # ports:
    #   - "127.0.0.1:9091:80"
    environment:
      TZ: Asia/Shanghai
    deploy:
      resources:
        limits:
          cpus: '0.1'
          memory: 128M
        reservations:
          cpus: '0.1'
          memory: 128M

  gwq5210.scrapyd:
    # image: gwq5210/scrapyd
    build:
      context: .
      dockerfile: ./scrapyd/Dockerfile
    container_name: gwq5210.scrapyd  # 容器名
    # ports:
    #   - "127.0.0.1:6801:6800"
    volumes:
      - ./scrapyd/conf:/etc/scrapyd
      - ${DOCKER_SITE_DATA_DIR}/scrapyd:/usr/share/scrapyd
      - ${DOCKER_SITE_LOGS_DIR}/scrapyd:/var/log/scrapyd
    restart: always
    environment:
      TZ: Asia/Shanghai
    deploy:
      resources:
        limits:
          cpus: '0.1'
          memory: 128M
        reservations:
          cpus: '0.1'
          memory: 128M

  gwq5210.mirai:
    # image: gwq5210/mirai:latest
    build:
      context: .
      dockerfile: ./mirai/Dockerfile
    # restart: always
    container_name: gwq5210.mirai  # 容器名
    volumes:
      - ${DOCKER_SITE_DATA_DIR}/mirai/plugins:/root/mirai/plugins
      - ${DOCKER_SITE_LOGS_DIR}/mirai:/root/mirai/logs
      - ${DOCKER_SITE_DATA_DIR}/mirai/bots:/root/mirai/bots
      - ./mirai/conf/Console/AutoLogin.yml:/root/mirai/config/Console/AutoLogin.yml
      - ./mirai/conf/net.mamoe.mirai-api-http/setting.yml:/root/mirai/config/net.mamoe.mirai-api-http/setting.yml
    # ports: 
    #   - "127.0.0.1:8080:8080"
    environment:
      TZ: Asia/Shanghai
      MIRAI_JAVA_OPTS: "-Xms128m -Xmx128m"
      MIRAI_VERIFY_KEY_FILE: "/run/secrets/mirai_verify_key.txt"
      MIRAI_BOT_QQ_FILE: "/run/secrets/mirai_bot_qq.txt"
      MIRAI_BOT_QQ_PASSWORD_FILE: "/run/secrets/mirai_bot_qq_password.txt"
    secrets:
      - mirai_bot_qq.txt
      - mirai_bot_qq_password.txt
      - mirai_verify_key.txt
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 512M

  gwq5210.elasticsearch:
    # image: gwq5210/elasticsearch:latest
    build:
      context: .
      dockerfile: ./elasticsearch/Dockerfile
    container_name: gwq5210.elasticsearch
    restart: always
    environment:
      - TZ=Asia/Shanghai
      - bootstrap.memory_lock=true
      - xpack.license.self_generated.type=${LICENSE}
      - "ES_JAVA_OPTS=-Xms128m -Xmx128m"
      - ELASTIC_PASSWORD_FILE=/run/secrets/elasticsearch_bootstrap_password.txt
      - KEYSTORE_PASSWORD_FILE=/run/secrets/elasticsearch_keystore_password.txt
    secrets:
      - source: gwq5210.com.crt
        target: $ES_CERTS_DIR/gwq5210.com.crt
      - source: gwq5210.com.key
        target: $ES_CERTS_DIR/gwq5210.com.key
      - source: ca.crt
        target: $ES_CERTS_DIR/ca.crt
      - source: elasticsearch_bootstrap_password.txt
        target: /run/secrets/elasticsearch_bootstrap_password.txt
      - source: elasticsearch_keystore_password.txt
        target: /run/secrets/elasticsearch_keystore_password.txt
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - ${DOCKER_SITE_KEY_DATA_DIR}/elasticsearch/data:/usr/share/elasticsearch/data
      - ${DOCKER_SITE_KEY_DATA_DIR}/elasticsearch/config/elasticsearch.keystore:/usr/share/elasticsearch/config/elasticsearch.keystore
      - ./elasticsearch/conf/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml
    ports:
      - 9200:9200
      - 9300:9300
    healthcheck:
      test: curl --cacert $ES_CERTS_DIR/ca.crt -s https://localhost:9200 >/dev/null; if [[ $$? == 52 ]]; then echo 0; else echo 1; fi
      interval: 30s
      timeout: 10s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 512M

  gwq5210.kibana:
    # image: gwq5210/kibana
    build:
      context: .
      dockerfile: ./kibana/Dockerfile
    container_name: gwq5210.kibana
    restart: always
    links:
      - gwq5210.elasticsearch:gwq5210.com
    ports:
      - 5601:5601
    environment:
      TZ: Asia/Shanghai
      ELASTICSEARCH_USERNAME: elastic
      ELASTICSEARCH_PASSWORD_FILE: '/run/secrets/elasticsearch_bootstrap_password.txt'
      ELASTICSEARCH_PASSWORD: 'a123456789'
    secrets:
      - source: gwq5210.com.crt
        target: $KIBANA_CERTS_DIR/gwq5210.com.crt
      - source: gwq5210.com.key
        target: $KIBANA_CERTS_DIR/gwq5210.com.key
      - source: ca.crt
        target: $KIBANA_CERTS_DIR/ca.crt
      - source: elasticsearch_bootstrap_password.txt
        target: /run/secrets/elasticsearch_bootstrap_password.txt
    volumes:
      - ./kibana/conf/kibana.yml:/usr/share/kibana/config/kibana.yml
      - ./kibana/conf/node.options:/usr/share/kibana/config/node.options
    healthcheck:
      test: curl --cacert $KIBANA_CERTS_DIR/ca.crt -k https://localhost:5601 >/dev/null; if [[ $$? == 52 ]]; then echo 0; else echo 1; fi
      interval: 30s
      timeout: 10s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 512M